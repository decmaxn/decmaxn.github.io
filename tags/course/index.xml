<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>course - Tag - Victor Ma</title><link>https://decmaxn.github.io/tags/course/</link><description>course - Tag - Victor Ma</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 04 Mar 2023 13:40:24 -0500</lastBuildDate><atom:link href="https://decmaxn.github.io/tags/course/" rel="self" type="application/rss+xml"/><item><title>Build K8s Cluster 2 Worker Nfs</title><link>https://decmaxn.github.io/k8s/build-k8s-cluster-2-worker-nfs/</link><pubDate>Sat, 04 Mar 2023 13:40:24 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/k8s/build-k8s-cluster-2-worker-nfs/</guid><description>Note for all nodes below, we have to install and configure kubernetes following &amp;ldquo;Build K8s Cluster 1 Control Plan&amp;rdquo;
NFS service NFS server hostname is c1-storage, IP is 172.16.94.5.
1 2 3 4 5 6 7 8 9 10 11 12 # Install NFS server and prepare export path sudo apt install -y nfs-kernel-server sudo mkdir -p /export/volumes sudo mkdir /export/volumes/pod # Configure our NFS Export in /etc/export for /export/volumes to (*) all IPs, with (rw) write permission # Using no_root_squash because in the demo we are going to mount it with root access.</description></item><item><title>Build K8s Cluster 1 Control Plan</title><link>https://decmaxn.github.io/k8s/build-k8s-cluster-1-control-plan/</link><pubDate>Fri, 03 Mar 2023 13:40:24 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/k8s/build-k8s-cluster-1-control-plan/</guid><description>Here are steps from a training course long time ago to install configure K8s control plane:
control plan hostname is c1-cp1, other nodes will be c1-node# and c1-storage control plan IP is 172.16.94.10, other nodes will be 11, 12&amp;hellip;. the pod network is 172.172.0.0/16 to not overlay with my lap network. All nodes have user vagrant for install, configure and maintain k8s cluster Common install and config for all cluster nodes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 # Linux 文件系统层叠内核模块,将多个文件系统合并成一个只读文件系统，并在其上添加一个可写层 sudo modprobe overlay # Linux 网络地址转换（NAT）和 IP 数据包过滤器内核模块，允许容器与宿主机和其他容器之间进行网络通信 sudo modprobe br_netfilter cat &amp;lt;&amp;lt;EOF | sudo tee /etc/modules-load.</description></item><item><title>AKS_install</title><link>https://decmaxn.github.io/k8s/aks_install/</link><pubDate>Wed, 01 Mar 2023 23:06:34 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/k8s/aks_install/</guid><description><![CDATA[Install Azure Cli 1 2 3 4 5  $ AZ_REPO=$(lsb_release -cs) $ echo &#34;deb [arch=amd64] https://packages.microsoft.com/repos/$azure-cli/ $AZ_REPOmain&#34; | sudo tee /etc/apt/sources.list.d/$ azure-cli.list $ curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg $ --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg &gt; /dev/$ null $ sudo apt-get update $ sudo apt-get install azure-cli   Create a AKS cluster 1 2 3 4 5 6 7 8 9 10  $ az login $ az account set --subscription &#34;Visual Studio Professional Subscription&#34; $ az group create --name &#34;Kubernetes-Cloud&#34; --location eastus $ az aks get-versions --location eastus -o table # let use 1.]]></description></item><item><title>Devcontainer_tdd</title><link>https://decmaxn.github.io/go/devcontainer_tdd/</link><pubDate>Sun, 26 Feb 2023 23:11:54 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/go/devcontainer_tdd/</guid><description>.devcontainer Run vscode command palette, Dev Conainter and search universal, this way to get Codespaces default container. Later on add pwsh.
TDD: Test-driven development Follow Hello world to practice TDD.</description></item><item><title>Map</title><link>https://decmaxn.github.io/go/map/</link><pubDate>Sun, 26 Feb 2023 16:35:38 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/go/map/</guid><description><![CDATA[Map Map can store any types key and value pairs, there is no order. There is no fixed size, and you can tell it&rsquo;s a pointer.
We have to give map key word to tell it&rsquo;s type, it&rsquo;s not like this before. Follow that is key type in [] and value type.
1 2 3 4 5 6 7 8 9 10 11 12 13  m := map[string]int{&#34;foo&#34;: 1, &#34;bar&#34;: 2} fmt.]]></description></item><item><title>Array_slice</title><link>https://decmaxn.github.io/go/array_slice/</link><pubDate>Sun, 26 Feb 2023 15:48:50 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/go/array_slice/</guid><description><![CDATA[Array It&rsquo;s similar with Python&rsquo;s array. In Go, array is also a continues memoery block in fixed size, so it&rsquo;s faster but not dynamic.
It also stores same type objects. What different is Go array is not a pointer.
1 2 3 4 5 6 7 8 9  var myarray [3]int // signature of array is [size]type 	fmt.Println(myarray) // [0 0 0] 	myarray[0] = 3 fmt.Println(myarray[0]) // 3 	arr := [3]int{1, 2, 3} // declare implicitly, it&#39;s not [1 2 3] 	fmt.]]></description></item><item><title>Constant</title><link>https://decmaxn.github.io/go/constant/</link><pubDate>Sun, 26 Feb 2023 15:04:15 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/go/constant/</guid><description>Normal features of Go constant Normal side of Go constant:
declare and assign at the same time, can not be done separately. Value has to be determined in complie time, not run time The type of constant can be implicit, or explicit if you need to 1 2 3 4 5 const pi = 3 // type not assigned fmt.Println(pi) // pi is treated as int fmt.</description></item><item><title>Var_primitives_pointer</title><link>https://decmaxn.github.io/go/var_primitives_pointer/</link><pubDate>Sun, 26 Feb 2023 12:40:50 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/go/var_primitives_pointer/</guid><description><![CDATA[Declaring var with Primitive Data Types Easy to understand way:
1 2 3  var num int num = 11 fmt.Println(num)   Esay to write way:
1 2 3  var num int = 11 var greeting string = &#34;Hello&#34; fmt.Println(num, greeting)   Normal way:
1 2 3  num := 11 greeting := &#34;Hello&#34; fmt.Println(num, greeting)   declaring multiple vars at the same time
1 2 3 4 5 6  // Declare three integer variables named &#34;x&#34;, &#34;y&#34;, and &#34;z&#34; with initial values of 1, 2, and 3, respectively 	x, y, z := 1, 2, 3 fmt.]]></description></item><item><title>Install Config</title><link>https://decmaxn.github.io/go/install-config/</link><pubDate>Sat, 25 Feb 2023 22:05:35 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/go/install-config/</guid><description><![CDATA[Installation download Go itself for windows and install, confirm with go version after.
1  go version go1.20.1 windows/amd64   Use &ldquo;go help doc&rdquo; for more information about doc command 1 2 3 4 5 6 7 8 9  &gt; go doc json.Decoder.Decode package json // import &#34;encoding/json&#34;  func (dec *Decoder) Decode(v any) error Decode reads the next JSON-encoded value from its input and stores it in the value pointed to by v.]]></description></item><item><title>git_under_the_hood</title><link>https://decmaxn.github.io/git_under_the_hood/</link><pubDate>Mon, 20 Feb 2023 15:05:13 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/git_under_the_hood/</guid><description><![CDATA[Meet SHA1 Every Object in Git has its own SHA1. SHA1 are unique in the universe?!
 This cryptograph concept and technology is also used for bitcoin.
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  :~$ mkdir gitdemo :~$ cd gitdemo/ :~/gitdemo$ echo &#34;Apple Pie&#34; | git hash-object --stdin # Create a SHA1. 23991897e13e47ed0adb91a0082c31c82fe0cbe5 :~/gitdemo$ echo &#34;Apple Pie&#34; | git hash-object --stdin -w # -w write it to GIT repository.]]></description></item></channel></rss>