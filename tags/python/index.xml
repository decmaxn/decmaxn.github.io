<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>python - Tag - Victor Ma</title><link>https://decmaxn.github.io/tags/python/</link><description>python - Tag - Victor Ma</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 18 Feb 2023 17:22:55 -0500</lastBuildDate><atom:link href="https://decmaxn.github.io/tags/python/" rel="self" type="application/rss+xml"/><item><title>Misc_package_module</title><link>https://decmaxn.github.io/python/misc_package_module/</link><pubDate>Sat, 18 Feb 2023 17:22:55 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/misc_package_module/</guid><description><![CDATA[Related imports Can be used for less typing, and mobilibility. Not recommanded
1 2  from .module_name import some_function from ..module_in_parent_folder import another_fuction   List attribute names imported via from module import * Without a init py file under compressed folder import star will get every modules
1 2 3 4 5 6 7 8  &gt;&gt;&gt; from reader.compressed import * # not recommanded way to import &gt;&gt;&gt; locals() {&#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None, &#39;__package__&#39;: None, &#39;__loader__&#39;: &lt;class &#39;_frozen_importlib.]]></description></item><item><title>Example_of_package_module_structure</title><link>https://decmaxn.github.io/python/example_of_package_module_structure/</link><pubDate>Sat, 18 Feb 2023 12:24:14 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/example_of_package_module_structure/</guid><description><![CDATA[Create a folder structure as this: py_pkg/reader/ reader module in reader package, has a class called Reader py_pkg/reader/reader.py 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # class has three methods: &#34;init&#34;, &#34;close&#34; and &#34;read&#34;. class Reader: #It takes a parameter &#34;filename&#34; which is used to open a file in read mode (&#39;rt&#39;) def __init__(self, filename): # assigns the file object to an instance variable called &#34;f&#34;.]]></description></item><item><title>Package_module_path</title><link>https://decmaxn.github.io/python/package_module_path/</link><pubDate>Fri, 17 Feb 2023 18:30:24 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/package_module_path/</guid><description><![CDATA[Searching path of packages and modules 1 2 3 4 5 6 7 8 9 10 11  &gt;&gt;&gt; import sys &gt;&gt;&gt; for i in range(len(sys.path)): ... print(sys.path[i]) ... /usr/lib/python38.zip /usr/lib/python3.8 /usr/lib/python3.8/lib-dynload /home/vma/.local/lib/python3.8/site-packages /usr/local/lib/python3.8/dist-packages /usr/lib/python3/dist-packages   Package and Modules There is this example package from one entries of searching path.
1 2  $ find /usr -name urllib -type d /usr/lib/python3.8/urllib   Packages are directories in sys.path contain other packages/modules, at least a module as __init__.]]></description></item><item><title>Generator</title><link>https://decmaxn.github.io/python/generator/</link><pubDate>Thu, 16 Feb 2023 20:22:20 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/generator/</guid><description>What is generator Generators are a powerful tool in Python that allow you to create iterable objects on-the-fly. They are functions that use the yield statement instead of return to produce a sequence of values.
Why we need generator One of the main reasons why we need generators is that they are memory-efficient. When you create a list, for example, all the elements of the list are created and stored in memory at once.</description></item><item><title>Swap_ecs_task_in_service</title><link>https://decmaxn.github.io/swap_ecs_task_in_service/</link><pubDate>Wed, 15 Feb 2023 08:50:56 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/swap_ecs_task_in_service/</guid><description>Start another ECS task for service before stop the original task I have made an improvement to my stop ecs task Lambda function that manages my ECS service in a more graceful manner. Previously, it would stop the task associated with my ECS service to trigger a service refresh. This would result in the service being offline for a few minutes.
With this improvement, it now increases the task count to 2, effectively launching a new task.</description></item><item><title>Swap_ecs_task_in_service</title><link>https://decmaxn.github.io/python/swap_ecs_task_in_service/</link><pubDate>Wed, 15 Feb 2023 08:50:56 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/swap_ecs_task_in_service/</guid><description>Start another ECS task for service before stop the original task I have made an improvement to my stop ecs task Lambda function that manages my ECS service in a more graceful manner. Previously, it would stop the task associated with my ECS service to trigger a service refresh. This would result in the service being offline for a few minutes.
With this improvement, it now increases the task count to 2, effectively launching a new task.</description></item><item><title>Shadow_and_deep_copy</title><link>https://decmaxn.github.io/python/shadow_and_deep_copy/</link><pubDate>Tue, 14 Feb 2023 19:56:23 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/shadow_and_deep_copy/</guid><description><![CDATA[In Python, the copy() method of a list creates a shallow copy of the list, which means that it creates a new list with a new memory address, but the new list contains references to the same objects as the original list. This means that changes made to the objects in the new list will also affect the objects in the original list, and vice versa.
1 2 3 4 5 6 7  &gt;&gt;&gt; original_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] &gt;&gt;&gt; new_list = original_list.]]></description></item><item><title>Concise_form</title><link>https://decmaxn.github.io/python/concise_form/</link><pubDate>Mon, 13 Feb 2023 17:32:15 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/concise_form/</guid><description><![CDATA[one liner for loop Instead of:
1 2 3 4 5 6  &gt;&gt;&gt; m = [] &gt;&gt;&gt; for i in range(10): ... m.append(i) ... &gt;&gt;&gt; m [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]   do
1 2 3 4  &gt;&gt;&gt; [i for i in range(10)] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &gt;&gt;&gt; {&#34;index&#34;+str(i): i*2 for i in range(3)} {&#39;index0&#39;: 0, &#39;index1&#39;: 2, &#39;index2&#39;: 4}   one liner condition Instead of:]]></description></item><item><title>Stop_ecs_task</title><link>https://decmaxn.github.io/stop_ecs_task/</link><pubDate>Mon, 13 Feb 2023 08:43:10 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/stop_ecs_task/</guid><description>Interact with AWS resource with boto3 This is used in an AWS Lambda been triggered daily to do a maintenance task. The infrastructure part is done by SAM.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 import boto3 import os # The handler function is triggered when the AWS Lambda function is executed.</description></item><item><title>Stop_ecs_task</title><link>https://decmaxn.github.io/python/stop_ecs_task/</link><pubDate>Mon, 13 Feb 2023 08:43:10 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/stop_ecs_task/</guid><description>Interact with AWS resource with boto3 This is used in an AWS Lambda been triggered daily to do a maintenance task. The infrastructure part is done by SAM.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 import boto3 import os # The handler function is triggered when the AWS Lambda function is executed.</description></item></channel></rss>