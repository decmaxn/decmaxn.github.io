<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>python - Tag - Victor Ma</title><link>https://decmaxn.github.io/tags/python/</link><description>python - Tag - Victor Ma</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 16 Feb 2023 20:22:20 -0500</lastBuildDate><atom:link href="https://decmaxn.github.io/tags/python/" rel="self" type="application/rss+xml"/><item><title>Generator</title><link>https://decmaxn.github.io/python/generator/</link><pubDate>Thu, 16 Feb 2023 20:22:20 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/generator/</guid><description>What is generator Generators are a powerful tool in Python that allow you to create iterable objects on-the-fly. They are functions that use the yield statement instead of return to produce a sequence of values.
Why we need generator One of the main reasons why we need generators is that they are memory-efficient. When you create a list, for example, all the elements of the list are created and stored in memory at once.</description></item><item><title>Shadow_and_deep_copy</title><link>https://decmaxn.github.io/python/shadow_and_deep_copy/</link><pubDate>Thu, 16 Feb 2023 19:56:23 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/shadow_and_deep_copy/</guid><description><![CDATA[In Python, the copy() method of a list creates a shallow copy of the list, which means that it creates a new list with a new memory address, but the new list contains references to the same objects as the original list. This means that changes made to the objects in the new list will also affect the objects in the original list, and vice versa.
1 2 3 4 5 6 7  &gt;&gt;&gt; original_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] &gt;&gt;&gt; new_list = original_list.]]></description></item><item><title>Concise_form</title><link>https://decmaxn.github.io/python/concise_form/</link><pubDate>Thu, 16 Feb 2023 17:32:15 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/concise_form/</guid><description><![CDATA[one liner for loop Instead of:
1 2 3 4 5 6  &gt;&gt;&gt; m = [] &gt;&gt;&gt; for i in range(10): ... m.append(i) ... &gt;&gt;&gt; m [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]   do
1 2 3 4  &gt;&gt;&gt; [i for i in range(10)] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &gt;&gt;&gt; {&#34;index&#34;+str(i): i*2 for i in range(3)} {&#39;index0&#39;: 0, &#39;index1&#39;: 2, &#39;index2&#39;: 4}   one liner condition Instead of:]]></description></item><item><title>Swap_ecs_task_in_service</title><link>https://decmaxn.github.io/python/swap_ecs_task_in_service/</link><pubDate>Wed, 15 Feb 2023 08:50:56 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/swap_ecs_task_in_service/</guid><description>Start another ECS task for service before stop the original task I have made an improvement to my stop ecs task Lambda function that manages my ECS service in a more graceful manner. Previously, it would stop the task associated with my ECS service to trigger a service refresh. This would result in the service being offline for a few minutes.
With this improvement, it now increases the task count to 2, effectively launching a new task.</description></item><item><title>Stop_ecs_task</title><link>https://decmaxn.github.io/python/stop_ecs_task/</link><pubDate>Mon, 13 Feb 2023 08:43:10 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/stop_ecs_task/</guid><description>Interact with AWS resource with boto3 This is used in an AWS Lambda been triggered daily to do a maintenance task. The infrastructure part is done by SAM.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 import boto3 import os # The handler function is triggered when the AWS Lambda function is executed.</description></item><item><title>Exception</title><link>https://decmaxn.github.io/python/exception/</link><pubDate>Sun, 12 Feb 2023 21:11:12 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/exception/</guid><description><![CDATA[Exception Mechanism for interrupting normal program flow and continuing in surrounding context.
 event is raising an exception handling an exception with exception handler unhandled exceptions cause termination Exception objects transferred from event to handler  Exception are ubiquitous in Python compare with other programing languages.
exceptional.py with unhandled exception 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  DIGIT_MAP = { &#39;zero&#39;: &#39;0&#39;, &#39;one&#39;: &#39;1&#39;, &#39;two&#39;: &#39;2&#39;, &#39;three&#39;: &#39;3&#39;, &#39;four&#39;: &#39;4&#39;, &#39;five&#39;: &#39;5&#39;, &#39;six&#39;: &#39;6&#39;, &#39;seven&#39;: &#39;7&#39;, &#39;eight&#39;: &#39;8&#39;, &#39;nine&#39;: &#39;9&#39;, } def convert(s): number = &#39;&#39; for token in s: number += DIGIT_MAP[token] x = int(number) return x   Now let&rsquo;s make a good call and an exception]]></description></item><item><title>Function</title><link>https://decmaxn.github.io/python/function/</link><pubDate>Sun, 12 Feb 2023 19:09:37 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/function/</guid><description><![CDATA[Simple function 1 2 3 4 5 6  def greeting(name): # order matters, define first print(&#34;Hello&#34;, name) #main program input_name = input(&#34;Enter your name:\n&#34;) greeting(input_name)   Scope The input_name is a global var and has global scope,
1 2 3  # name is not defined - cause it&#39;s defined and only avaible in the func # print(&#34;Thanks&#34;, name) print(&#34;Thanks&#34;, input_name) # input_name is defined outside of func   This greeting_global function uses a global var]]></description></item><item><title>Venv and API call</title><link>https://decmaxn.github.io/python/venv_and_api/</link><pubDate>Sun, 12 Feb 2023 17:12:35 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/venv_and_api/</guid><description>Venv Creating virtual env, make sure to slect vscode python interpreter after.
1 2 3 4 $ python3 -m venv venv $ source venv/bin/activate (venv) $ pip3 install requests $ deactivate Api call example First sign up at Open weather and get an API key.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import requests # Copy/paste from Open weatcher:&amp;#34;https://api.</description></item><item><title>Loop_list_and_dictionary</title><link>https://decmaxn.github.io/python/loop_list_and_dictionary/</link><pubDate>Sun, 12 Feb 2023 16:53:04 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/loop_list_and_dictionary/</guid><description><![CDATA[Two loop variables in one loop with items method of dictionary This way, you can get both the key and value of each key value pair at the same time
1 2 3 4 5 6 7 8  Chars = { &#39;letters&#39;: &#39;abcde...&#39;, &#39;numbers&#39;: 1234567890, &#39;special&#39;: &#39;!@#$%...&#39; } for key, value in Chars.items(): # items method of dictionary print(key,&#39;includes&#39;,value)   Dictionary represent object 1 2 3 4 5 6 7 8 9 10 11 12  contacts = { # use dictionary for object &#34;number&#34;: 4, &#34;students&#34;: [ #List of dictionaries {&#34;name&#34;:&#34;Sarah&#34;, &#34;email&#34;:&#34;sarah@email.]]></description></item><item><title>Dictionary</title><link>https://decmaxn.github.io/python/dictionary/</link><pubDate>Sat, 11 Feb 2023 15:41:50 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/python/dictionary/</guid><description><![CDATA[Compare with javascript object In Python, dictionaries are data structures that store key-value pairs. Each key maps to a unique value within the dictionary, and you can use the keys to look up the corresponding values. For example:
1 2  person = {&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 32, &#39;city&#39;: &#39;New York&#39;} print(person[&#39;name&#39;]) # Output: John   In JavaScript, objects serve a similar purpose as dictionaries in Python. They also store key-value pairs, and you can use the keys to look up the corresponding values.]]></description></item></channel></rss>