<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Go - Tag - Victor Ma</title><link>https://decmaxn.github.io/tags/go/</link><description>Go - Tag - Victor Ma</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 26 Feb 2023 23:11:54 -0500</lastBuildDate><atom:link href="https://decmaxn.github.io/tags/go/" rel="self" type="application/rss+xml"/><item><title>Devcontainer_tdd</title><link>https://decmaxn.github.io/go/devcontainer_tdd/</link><pubDate>Sun, 26 Feb 2023 23:11:54 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/go/devcontainer_tdd/</guid><description>devcontainer Run vscode command palette, Dev Conainter and search universal, this way to get Codespaces default container. Later on add pwsh.
TDD: Test-driven development Follow Hello world to practice TDD.</description></item><item><title>Map</title><link>https://decmaxn.github.io/go/map/</link><pubDate>Sun, 26 Feb 2023 16:35:38 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/go/map/</guid><description><![CDATA[Map Map can store any types key and value pairs, there is no order. There is no fixed size, and you can tell it&rsquo;s a pointer.
We have to give map key word to tell it&rsquo;s type, it&rsquo;s not like this before. Follow that is key type in [] and value type.
1 2 3 4 5 6 7 8 9 10 11 12 13  m := map[string]int{&#34;foo&#34;: 1, &#34;bar&#34;: 2} fmt.]]></description></item><item><title>Array_slice</title><link>https://decmaxn.github.io/go/array_slice/</link><pubDate>Sun, 26 Feb 2023 15:48:50 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/go/array_slice/</guid><description><![CDATA[Array It&rsquo;s similar with Python&rsquo;s array. In Go, array is also a continues memoery block in fixed size, so it&rsquo;s faster but not dynamic.
It also stores same type objects. What different is Go array is not a pointer.
1 2 3 4 5 6 7 8 9  var myarray [3]int // signature of array is [size]type 	fmt.Println(myarray) // [0 0 0] 	myarray[0] = 3 fmt.Println(myarray[0]) // 3 	arr := [3]int{1, 2, 3} // declare implicitly, it&#39;s not [1 2 3] 	fmt.]]></description></item><item><title>Constant</title><link>https://decmaxn.github.io/go/constant/</link><pubDate>Sun, 26 Feb 2023 15:04:15 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/go/constant/</guid><description>Normal features of Go constant Normal side of Go constant:
declare and assign at the same time, can not be done separately. Value has to be determined in complie time, not run time The type of constant can be implicit, or explicit if you need to 1 2 3 4 5 const pi = 3 // type not assigned fmt.Println(pi) // pi is treated as int fmt.</description></item><item><title>Var_primitives_pointer</title><link>https://decmaxn.github.io/go/var_primitives_pointer/</link><pubDate>Sun, 26 Feb 2023 12:40:50 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/go/var_primitives_pointer/</guid><description><![CDATA[Declaring var with Primitive Data Types Easy to understand way:
1 2 3  var num int num = 11 fmt.Println(num)   Esay to write way:
1 2 3  var num int = 11 var greeting string = &#34;Hello&#34; fmt.Println(num, greeting)   Normal way:
1 2 3  num := 11 greeting := &#34;Hello&#34; fmt.Println(num, greeting)   declaring multiple vars at the same time
1 2 3 4 5 6  // Declare three integer variables named &#34;x&#34;, &#34;y&#34;, and &#34;z&#34; with initial values of 1, 2, and 3, respectively 	x, y, z := 1, 2, 3 fmt.]]></description></item><item><title>Install Config</title><link>https://decmaxn.github.io/go/install-config/</link><pubDate>Sat, 25 Feb 2023 22:05:35 -0500</pubDate><author>Victor Ma</author><guid>https://decmaxn.github.io/go/install-config/</guid><description><![CDATA[Installation download Go itself for windows and install, confirm with go version after.
1  go version go1.20.1 windows/amd64   Use &ldquo;go help doc&rdquo; for more information about doc command 1 2 3 4 5 6 7 8 9  &gt; go doc json.Decoder.Decode package json // import &#34;encoding/json&#34;  func (dec *Decoder) Decode(v any) error Decode reads the next JSON-encoded value from its input and stores it in the value pointed to by v.]]></description></item></channel></rss>